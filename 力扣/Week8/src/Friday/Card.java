package Friday;
/**
 * 小明被劫持到X赌城，被迫与其他3人玩牌。
一副扑克牌（去掉大小王牌，共52张），均匀发给4个人，每个人13张。
这时，小明脑子里突然冒出一个问题：
如果不考虑花色，只考虑点数，也不考虑自己得到的牌的先后顺序，自己手里能拿到的初始牌型组合一共有多少种呢？
 *
 */

/**
 * 思路：
 * 总共13种牌，每种牌4张，用户需要取13次。
 * 对牌种进行考虑，结果中牌的种类数至少为4，最多为13；采用dfs回溯法，对于当前的牌种，考虑取得的数量（0~4）,然后更新当前
 * 手里的牌数，接着进入下一层的选择。如果最终sum=13了，也就是手里拿够了13张牌，就回溯会上一步，选择别的情况。
 *
 */
public class Card {
	int ans=0;   //最终的方案数
	int sum=0;   //手中的牌数
	
	
	//kind表示牌的值，最多为13
    public void dfs(int kind) {
    	//注意递归的出口：  牌数大于13  或者  牌值大于14(13刚好计算完后进入了14,此时满足题意)
    	
    	if(sum>13) {
    		return;
    	}
    	if(kind>14)      
    		return;
    	if(sum==13) {    //牌数最多为13
    		ans++;
    		return;
    	}
    		
    	
    	//对于当前的牌种，获取牌数(0-4)
    	for(int i=0;i<=4;i++) {
    		sum=sum+i;
    		dfs(kind+1);
    		
    		//回溯逆操作
    		sum=sum-i;
    	}
    }
    
    public static void main(String[] args) {
		Card t=new Card();
		t.dfs(1);   //初始牌点为1
		System.out.println(t.ans);
	}
}
